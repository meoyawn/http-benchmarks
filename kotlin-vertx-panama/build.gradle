plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'application'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "idea"
}

group = 'bench'
version = '1.0'

sourceSets {
    main {
        java.srcDirs += file("gen/main/java/")
    }
}

idea {
    module {
        generatedSourceDirs += file("gen/main/java/")
    }
}

application {
    mainClass = "bench.Main"
    applicationDefaultJvmArgs.addAll(
        "--enable-native-access=ALL-UNNAMED",
        "-Djava.library.path=./sqlite3"
    )
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.0",
    )

    implementation(
        "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.0",
        "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.10.0",
    )

    implementation(
        'com.alibaba.fastjson2:fastjson2:2.0.53',
        'com.alibaba.fastjson2:fastjson2-kotlin:2.0.53',
    )

    implementation(
        platform("io.vertx:vertx-dependencies:4.5.11"),
        "io.vertx:vertx-config",
        "io.vertx:vertx-lang-kotlin-coroutines",
        "io.vertx:vertx-web",
        "io.vertx:vertx-json-schema",
    )
    if (System.getProperty('os.name') == 'Mac OS X' && System.getProperty('os.arch') == 'aarch64') {
        implementation(
            'io.netty:netty-resolver-dns-native-macos:4.1.116.Final:osx-aarch_64',
            'io.netty:netty-transport-native-kqueue:4.1.116.Final:osx-aarch_64',
        )
    }

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll(
            "-Xno-call-assertions",
            "-Xno-param-assertions",
            "-Xno-receiver-assertions",
        )
    }
}

shadowJar {
    mergeServiceFiles()
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

dependencyUpdates {
    checkConstraints = true

    rejectVersionIf {
        final version = it.candidate.version.toLowerCase()

        [
            "m", // milestone
            "alpha",
            "beta",
            "eap",
            "rc",
            "cr",
        ].any { version.contains(it) }
    }
}
